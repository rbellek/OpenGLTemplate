#version 430 core
out vec4 FragColor;

in vec3 currentPosition;
in vec3 normal;


uniform vec3 lightPos;
uniform vec3 lightColor;
uniform vec3 cameraPos;


void main()
{
	float ambient = 0.2f;

	// diffuse lighting 
	vec3 n = normalize(normal);
	vec3 lightDirection = normalize(lightPos - currentPosition);
	float diffuse = max(dot(n, lightDirection), 0.0f);

	// specular lighting
	float specularLight = 0.5f;
	vec3 viewDirection = normalize(cameraPos - currentPosition);
	vec3 reflectionDirection = reflect(-lightDirection, n);
	float specularAmount = pow(max(dot(viewDirection, reflectionDirection), 0.0f), 8);
	float specular = specularAmount * specularLight;
	

	FragColor = vec4(lightColor * (ambient + diffuse + specular), 1.0f);
}